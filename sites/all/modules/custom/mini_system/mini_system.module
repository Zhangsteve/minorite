<?php

/**
 * @file
 * Handles general site configuration, configuration, and dependencies.
 *
 * @author steve zhang <xianchi.zhang@gmail.com>
 */

/**
 * The block or element can change depending on the network: internal or external.
 */
define('DRUPAL_CACHE_PER_NETWORK', 0x0010);

/**
 * The block or element can change depending on the management level.
 */
define('DRUPAL_CACHE_PER_MANAGEMENT', 0x0020);

/**
 * Implements hook_boot().
 *
 * Register name spaces of bootstrap modules
 */
function mini_system_boot() {
  foreach (module_list(FALSE, TRUE) as $module) {
    $filename = drupal_get_filename('module', $module);
    mini_system_register($module, dirname($filename));
  }
}

/**
 * Implements hook_init().
 *
 * Register all name spaces of enabled modules.
 */
function mini_system_init() {
  // Force default timezone. TODO: remove.
  date_default_timezone_set('Europe/Paris');

  foreach (module_list() as $module) {
    $filename = drupal_get_filename('module', $module);
    mini_system_register($module, dirname($filename));
  }

  // Add tooltip on every page
  // If there is the jquery ui tooltip
  if (drupal_add_library('system', 'ui.tooltip', true)) {
    drupal_add_library('mini_system', 'tooltip');
  }
  if (!path_is_admin(current_path())) {
    drupal_add_library('mini_system', 'jquery.placeholder');
  }
}

/**
 * Implements hook_library().
 */
function mini_system_library() {
  $path = drupal_get_path('module', 'mini_system');
  $libraries = array();

  // Tooltip plugin.
  $libraries['tooltip'] = array(
    'title' => 'Tooltip',
    'version' => '1.0',
    'js' => array(
      $path . '/js/tooltip.js' => array(),
    ),
  );

  // jQuery placeholder plugin.
  $libraries['jquery.placeholder'] = array(
    'title' => 'jQuery Placeholder',
    'website' => 'http://mathiasbynens.be/demo/placeholder',
    'version' => '1.8.7',
    'js' => array(
      $path . '/js/jquery.placeholder.js' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info().
 */
function mini_system_element_info() {
  $types = array();

  // Defines a section form element.
  $types['section'] = array(
    '#input' => FALSE,
    '#attributes' => array(),
    '#theme_wrappers' => array('section'),
  );

  return $types;
}

/**
 * Registers disney modules name-spaces for convenience. For instance, if the
 * module name is 'disney_access', the name-space registered will be:
 *
 *  - Disney\Access -> disney_access\lib
 *
 * The name-space mount point is the lib directory of the module root.
 *
 * @param string $name
 *   The name space component to register; e.g., 'node'.
 * @param string $base
 *   The relative path to the Drupal component in the file system.
 * @param string $path
 *   The relative path to root classes directory in the Drupal component.
 *   Default to '/lib'.
 */
function mini_system_register($name, $base, $path = '/lib') {
  $loader = drupal_classloader();
  // Only register Disney's name space.
  if (substr($name, 0, 4) === 'mini') {
    $namespaces = array();
    foreach (explode('_', $name) as $component) {
      // Camel\Case the name space.
      $namespaces[] = ucfirst($component);
    }
    $namespace = implode('\\', $namespaces);
    $loader->registerNamespace($namespace, DRUPAL_ROOT . '/' . $base . $path);
  }
}

/**
 * Implements hook_modules_installed().
 *
 * Register name space of installed modules.
 */
function mini_system_modules_installed(array $modules) {
  foreach ($modules as $module) {
    // Only register Disney's name space. In the install process, mini_system
    // is required. We avoid registering itself to not cause PHP fatal as
    // class loader module is not required while it is a dependency.
    if (substr($module, 0, 4) === 'mini') {
      $filename = drupal_get_filename('module', $module);
      mini_system_register($module, dirname($filename));
    }
  }
}

/**
 * Implements hook_modules_enabled().
 *
 * Register name space of enabled modules.
 */
function mini_system_modules_enabled(array $modules) {
  mini_system_modules_installed($modules);
}

/**
 * Implements hook_form_alter().
 * Disable the flag operation in the content admin page
 */
function mini_system_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($form_id == 'node_admin_content') {
    foreach ($form['admin']['options']['operation']['#options'] as $field => $value) {
      if (strstr($field, 'flag_') !== FALSE) {
        unset($form['admin']['options']['operation']['#options'][$field]);
      }
    }
  }
  // Restriction of access to contact page.
  if (user_is_anonymous() && $form_id == 'contact_site_form') {
    drupal_goto('user/login');
  }
}


/**
 * Implements hook_block_info().
 */
function mini_system_block_info() {

}

/**
 * Implements hook_block_configure().
 */
function mini_system_block_configure($delta = '') {

}

/**
 * Implements hook_block_save().
 */
function mini_system_block_save($delta = '', $edit = array()) {
}

/**
 * Implements hook_block_view().
 */
function mini_system_block_view($delta = '') {

}

/**
 * Implements hook_entity_info_alter().
 *
 * Adds the necessary view modes.
 */
function mini_system_entity_info_alter(&$entities) {
  // List view modes allow entities to be displayed on listing pages.
  $entities['node']['view modes']['list'] = array(
    'label' => t('List'),
    'custom settings' =>  TRUE,
  );
  // Menu view modes allow entities to be displayed on menu wrappers.
  $entities['node']['view modes']['menu'] = array(
    'label' => t('Menu'),
    'custom settings' =>  TRUE,
  );
  // View mode for 'team news'.
  $entities['node']['view modes']['team'] = array(
    'label' => t('Team'),
    'custom settings' =>  TRUE,
  );
}

/**
 * Implements hook_menu_alter().
 */
function mini_system_menu_alter(&$items) {
  // Only super administrator can change this.
  $items['admin/people/permissions']['access arguments'] = array('super administrator');
}

/**
 * Implements hook_custom_theme().
 *
 * Enables HTML 4 theme if browser is not HTML 5 compatible.
 */
function mini_system_custom_theme() {
  //use mobile_switch module to detect the kind of user's device.
  //@see mobile_switch.module
  $browser = mini_system_browser_capability();
  return $browser->isHtml5() ? 'disney' : 'disney_html4';
}

/**
 * Returns user browser's capabilities.
 *
 * @return Disney\System\Browser\CapabilityInterface
 */
function mini_system_browser_capability() {
  return drupal_container()->get('browser.capability');
}

/**
 * Implements hook_theme().
 */
function mini_system_theme($existing, $type, $theme, $path) {
  $theme = array(
    // TODO: check this is needed?
    'system_wrapper' => array(
      'render element' => 'element',
      'template' => 'system-wrapper',
      'path' => $path . '/theme',
    ),
    'section' => array(
      'render element' => 'element',
      'file' => 'mini_system.theme.inc',
    ),
    // TODO: container

    'metadata_wrapper' => array(
      'variables' => array('attributes' => array('class' => array('metadata-wrapper')), 'children' => array()),
      'file' => 'mini_system.theme.inc',
    ),
    'metadata_formatter' => array(
      'variables' => array('attributes' => array('class' => array('metadata-default')), 'item' => array()),
      'file' => 'mini_system.theme.inc',
    ),
    // TODO: Check drupal.org why we need to do this..?
    'metadata_formatter__time' => array(
      'variables' => array('attributes' => array('class' => array('metadata-default')), 'item' => array()),
      'file' => 'mini_system.theme.inc',
    ),
  );

  return $theme;
}

/**
 * Preprocess variables for node.tpl.php
 */
function mini_system_preprocess_node(&$variables) {
  $variables['theme_hook_suggestions'][] = "node__$variables[type]__$variables[view_mode]";

  // Default is used in panels by complex content type while full is used for
  // content rendered in full page: articles, events, advertisements, etc.
  if (isset($variables['body'][0])) {
    $variables['content']['lead']['#markup'] = '<p class="chapo">' . strip_tags($variables['body'][0]['summary']) . '</p>';
  }
}

/**
 * Preprocess variables for block.tpl.php.
 */
function mini_system_preprocess_block(&$variables) {
  if (isset($variables['block']->classes)) {
    $variables['classes_array'] = array_merge($variables['classes_array'], $variables['block']->classes);
  }
}

/**
 * Implements hook_node_insert().
 */
function mini_system_node_insert($node) {
  if ($node->status == 1) {
    foreach (module_invoke_all('node_cache_invalidate', $node) as $block) {
      $block->clear();
    }
  }
}

/**
 * Implements hook_node_update().
 */
function mini_system_node_update($node) {
  if ($node->status == 1 || $node->original->status != $node->status) {
    foreach (module_invoke_all('node_cache_invalidate', $node) as $block) {
      $block->clear();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function mini_system_node_delete($node) {
  if ($node->status == 1) {
    foreach (module_invoke_all('node_cache_invalidate', $node) as $block) {
      $block->clear();
    }
  }
}

/**
 * Implements hook_menu_link_insert().
 */
function mini_system_menu_link_insert($link) {
  if (!$link['hidden']) {
    foreach (module_invoke_all('link_cache_invalidate', $link) as $block) {
      $block->clear();
    }
  }
}

/**
 * Implements hook_menu_link_update().
 */
function mini_system_menu_link_update($link) {
  foreach (module_invoke_all('link_cache_invalidate', $link) as $block) {
    $block->clear();
  }
}

/**
 * Implements hook_menu_link_delete().
 */
function mini_system_menu_link_delete($link) {
  if (!$link['hidden']) {
    foreach (module_invoke_all('link_cache_invalidate', $link) as $block) {
      $block->clear();
    }
  }
}

// TODO: what is this for ?
function mini_system_preprocess_system_wrapper(&$variables){
  $block = $variables['element']['#block'];
  $variables['block_html_id'] = drupal_html_id('block-' . $block->module . '-' . $block->delta);
}

/**
 * Returns the menu link ID (mlid) given a path.
 *
 * @param string $path
 */
function mlid($path = NULL) {
  static $mlids = array();

  if (empty($path)) {
    $path = $_GET['q'];
  }

  if (isset($mlids[$path])) {
    return $mlids[$path];
  }

  return $mlids[$path] = db_query("SELECT mlid FROM {menu_links} ml WHERE ml.router_path = :path AND module = 'system'", array(':path' => $path))->fetchField();
}

/**
 * Change date from FR to EN to create the right timestamp
 * Ex : 31/03/2013 -> 03/31/2013
 */
function mini_system_date_fr_to_en($date) {
  return preg_replace('%([0-9]+)/([0-9]+)/(.*)%', '$2/$1/$3', $date);
}

/**
 * hook_theme_registry_alter(&$theme_registry)
 * To add a new variables for the more_link theme
 */
function mini_system_theme_registry_alter(&$theme_registry) {
  $theme_registry['more_link']['variables']['query'] = '';
}
