<?php
use Mini\System\NodeFieldQuery;
/**
 * Returns Disney primary menus.
 */
function mini_menu_primary() {
  $menu = array();
  // Hard coded for performances and ordering purpose. This is the primary
  // navigation links and is not intended to change that much.
  $menu['voyage'] = 'node';
  $menu['life'] = 'node';
  $menu['headlines'] = 'node';
  $menu['game'] = 'node';

  return $menu;
}

/**
 * Implements hook_menu().
 *
 * Integrates node call-back attributed to workbench sections with menu system.
 *
 * Hijack section/%node callback to allow workbench to belong to a virtual
 * menu and having edit tabs at the same time.
 */
function mini_menu_menu() {
  $items = array();

  require_once 'mini_menu.features.menu_custom.inc';
  $menus = mini_menu_menu_default_menu_custom();

  foreach (array_keys(mini_menu_primary()) as $menu) {
    $items[$menu] = array(
        'title' => $menus[$menu]['menu_name'],
        'access callback' => TRUE,
        'menu_name' => $menu,
        'type' => MENU_CALLBACK,
    );
  }
  return $items;
}
/**
 * Implements hook_node_view().
 *
 * Given a node displayed in 'full' mode, check if it belongs to a workbench
 * section, and re-set the menu active item to activate accordingly the menu
 * and bread-crumbs.
 */
function mini_menu_node_view($node, $view_mode, $langcode) {
  // Only select nodes which are being viewed as full page and is not a complex
  // page since by definition a complex page is also a menu item so the routing
  // works naturally with the menu API without the need of defining the active item.
  if ($view_mode == 'full') {
    // When a node view mode is full, unset the title to avoid displaying it two times.
    drupal_set_title('');
    mini_menu_set_breadcrumb($node);
  }
}


/**
 * Sets the breadcrumb based on the workbench section of the node.
 *
 * TODO: factorize the function and clean-up a bit. Also check if cache_bootstrap needs to be set or not.
 */
function mini_menu_set_breadcrumb($node) {
  // Save the current path.
  $current_path = current_path();
  // Reset to the last item to keep the node id at the right place.
  menu_set_active_item($current_path);
}
/**
 * Implements hook_block_info_alter().
 *
 * Enables blocks and defines their initial position.
 */
function mini_menu_block_info_alter(&$blocks, $theme, $code_blocks) {
  if ($theme == 'minorite' || $theme == 'mini_html4') {
    // Enables primary navigation.
    $blocks['mini_menu']['primary']['status'] = 1;
    $blocks['mini_menu']['primary']['region'] = 'navigation';
    $blocks['mini_menu']['primary']['weight'] = -57;
    // Enables secondary navigation.
    $blocks['mini_menu']['secondary']['status'] = 1;
    $blocks['mini_menu']['secondary']['region'] = 'left';
    // Enables footer navigation.
    $blocks['mini_menu']['navigation']['status'] = 1;
    $blocks['mini_menu']['navigation']['region'] = 'footer';
    // Enables other-sites navigation.
    if (isset($blocks['menu']['links'])) {
      // The menu is created after feature has first installed and enabled this
      // module so the links block does not yet exists. We need to check first
      // to avoid buggy site install or empty INSERT in the {block} table.
      $blocks['menu']['links']['status'] = 1;
      $blocks['menu']['links']['region'] = 'footer';
    }
    // Enables footer navigation.
    if (isset($blocks['menu']['footer'])) {
      // The menu is created after feature has first installed and enabled this
      // module so the links block does not yet exists. We need to check first
      // to avoid buggy site install or empty INSERT in the {block} table.
      $blocks['menu']['footer']['status'] = 1;
      $blocks['menu']['footer']['weight'] = -10;
      $blocks['menu']['footer']['region'] = 'bottom';
    }
  }
}

/**
 * Implements hook_block_info().
 *
 * TODO: Create a new cache by management level.
 */
function mini_menu_block_info() {
  $blocks = array();

  $blocks['primary']['info'] = t('Primary menu');
  $blocks['secondary']['info'] = t('Secondary menu');
  $blocks['navigation']['info'] = t('Navigation menu');

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mini_menu_block_view($delta = '') {
  $block = array();

  switch ($delta) {
  	case 'primary':
  	  $block['content'] = mini_menu_block_primary();
  	  break;
    case 'secondary':
      // Secondary block navigation is composed of level-2 and more navigation
      // links from the current section. It is based on menu system.
      $block['content'] = mini_menu_block_secondary();
      break;

    case 'navigation':
      // Navigation block is composed of level-1 menus with level-2 links to
      // these sections and is displayed at the bottom.
      $block['content'] = mini_menu_block_navigation();
      break;
  }
  return $block;
}
/**
 * Returns the primary menu block.
 *
 * Get the level-2 navigation and displays it per menus.
 */
function mini_menu_block_primary($elements = array()) {
  // Render the home as a menu link itself.
  $elements['menu']['#theme_wrappers'] = array('menu_tree__primary');
  $elements['menu']['home'] = array(
    '#theme' => 'menu_link__home',
    '#title' => t('Home'),
    '#href' => '<front>',
  );

  $names = menu_get_menus(FALSE);
  foreach (mini_menu_primary() as $menu => $menu_mode) {
    // Depending on the menu mode, either return a list of articles of the menu
    // section, either return a block of admin contributed content.
    switch ($menu_mode) {
      case 'node':
        // Configures the query to return entities of the section belonging
        // to the menu (that is, workbench sub-sections).
        $query = new NodeFieldQuery();
        $query->propertyOrderBy('created', 'DESC')
              ->entityCondition('bundle', array('article'))
              ->addSectionType($menu)
              ->range(0, 3);

        $entities = $query->execute();

        if (empty($entities)) {
          $elements['menu'][$menu]['#nodes']['default_message'] = array(
            '#markup' => '<p>' . t('No section content has been created yet.') . '</p>',
            '#prefix' => '<li id="first-time">',
            '#suffix' => '</li>',
          );
        }
        else {
          $nodes = node_load_multiple(array_keys($entities['node']));
          $elements['menu'][$menu]['#nodes'] = node_view_multiple($nodes, 'menu');
        }
        break;

      case 'block':
        break;
    }
    $elements['menu'][$menu]['#links'] = menu_navigation_links($menu);

    // Sets the menu title to redirect the first child found in the sub-menu.
    if (empty($elements['menu'][$menu]['#links'])) {
      $elements['menu'][$menu]['#title'] = l(t($names[$menu]), $menu);
    }
    else {
      $link = current($elements['menu'][$menu]['#links']);
      $elements['menu'][$menu]['#title'] = l(t($names[$menu]), $link['href']);
    }
    $elements['menu'][$menu]['#attributes'] = array('class' => 'nav meganav');
    // Renders links before injecting them as children in the theme header.
    $elements['menu'][$menu]['#theme_wrappers'] = array('links__navigation', 'menu_header');
  }
  return $elements;
}

/**
 * Return secondary menu items
 */
function mini_menu_block_secondary() {
  $content = array();
  $trail = menu_get_active_trail();
  $names = menu_get_menus(FALSE);
  if (($menu = end($trail)) && isset($menu['menu_name'])) {
    if (!array_key_exists($menu['menu_name'], $names)) {
      // Special case if a node has a workbench access but not in a front menu
    }
    // Checks the menu is not a system menu in which case it could render a
    // non supported markup. A case can be the system provided 'navigation'
    // menu for instance.
    if (array_key_exists($menu['menu_name'], $names)) {
      // TODO: do not use this function. What about block cache here ??
      $content = mini_render_block('menu', $menu['menu_name']);
      $content = reset($content);
      $content['#theme_wrappers'] = array('menu_tree__secondary');
      $content['#block']->subject =  check_plain($names[$menu['menu_name']]);
    }
  }

  if (isset($current_path)) {
    menu_set_active_item($current_path['href']);
  }

  return $content;
}
/**
 * Returns the footer navigation menu block.
 */
function mini_menu_block_navigation() {
  $elements = array();
  $names = menu_get_menus(FALSE);
  // TODO: export menus in features and use the function here.
  return $elements;
}
/**
 * Implements hook_theme().
 */
function mini_menu_theme($existing, $type, $theme, $path) {
  return array(
      'menu_header' => array(
          'variables' => array('title' => NULL, 'nodes' => NULL, 'children' => NULL),
          'template' => 'menu-header',
          'path' => $path . '/templates',
      ),
      'menu_footer' => array(
          'variables' => array('title' => NULL, 'children' => NULL),
      ),
  );
}


/**
 * Returns HTML for a wrapper for a footer menu.
 *
 * @param $variables
 *   An associative array containing:
 *   - title: The title of the menu.
 *   - children: An HTML string containing the tree's items.
 */
function theme_menu_footer($variables) {
  $title = "\n";
  $title .= '<h2>' . $variables['title'] . "</h2>\n";

  static $grid = 1;
  return '<div class="w-' . $grid++ . '">' . $title . $variables['children'] . "</div>\n";
}

/**
 * Implements hook_menu_alter().
 *
 * Displays the login link in the user menu as a normal item.
 */
function mini_menu_menu_alter(&$items) {
  // Displays this menu link in the drop-down.
  // TODO: use the position if allowed ?
  $items['user']['options'] = array('position' => 'right');
  $items['user/logout']['options'] = array('position' => 'right');
}